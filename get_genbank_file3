#!/usr/bin/perl
#v3.1
# new get_genbank_file.pl fastainput output
# works with new-style NCBI fasta format ONLY
# example: >CP009318.1 Bacillus cereus 03BB102, complete genome

# get_genbank_file.pl fastainput  
no warnings 'deprecated';

use LWP::Simple;

my $DEBUG = 0;
my $fasta=shift @ARGV;
print "fasta: $fasta\n";
my $output=shift @ARGV;

open IN,"$fasta" ;
my %strain2gi=();
while (my $line=<IN>) {
   
    chomp $line;
    if ($line =~/^>(\S+)\s(\S+)/) {
	$gi="none";
  	$name =$1;
	$subname=$2;
        # remove special characters or map to _
	$name =~ s/\|/_/g;
	$name =~ s/,//g;
	$name =~ s/\+/plus/g;
	$name =~ s/\[//g;
	$name =~ s/\]//g;
	$name =~ s/\(//g;
	$name =~ s/\)//g;
	$name =~ s/\//-/g;
	$name =~ s/[\t\r\s]+/_/g;
	$name =~ s/_+/_/g;
	$name =~ s/\://g;
	
	$name2 =substr($name,0,88); # cap length of name
	$name=$name2;

    } 
  
    # only looks at new-style NCBI headers: >CP009318.1 Bacillus cereus 03BB102, complete genome
    # currently picks up the .n version number. If we ignore it, NCBI will return
    # the latest version. That change would look like:
    # if ($line =~/^>(\S+)\.\d+\s(.*),/) {
    if ($line =~/^>(\S+\.\d+)\s(.*),/) {
	$gi=$1;
    }

    $DEBUG && print "strain2gi $name: $gi\n";
    $strain2gi{$name}=$gi;
    
}
close IN;

open OUT , ">$output" or die $!;
foreach my $gi (sort values %strain2gi) {
    $DEBUG && print "1:gi: $gi\n";
    
    my $s = "http://www.ncbi.nlm.nih.gov/entrez/eutils/efetch.fcgi?db=nuccore&id=".$gi."&rettype=gbwithparts&retmode=text";

    $DEBUG && print "s:$s\n";
    my $genbank = get($s);

    sleep(3); # don't hit NCBI too frequently!
    #  ncbi doesn't respond with a nice error responce code when the search is unsuccesful so
    #  have to check for ERROR string.
    if($genbank=~/^ERROR/){
	print STDERR "$gi\t$genbank\n"; 
    } else {
	print OUT $genbank;
    }
}
close OUT;

# Not sure why exit with an error by default?
exit 1;



