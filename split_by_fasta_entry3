#!/usr/bin/perl
#v3.0

# split_by_fasta_entry2.pl fasta prefix 
# split_by_fasta_entry2.pl fasta prefix  1 
# Split fasta into prefix1, prefix2, etc.
# Start a new "prefix#" output file for each fasta entry.
#  If third argument > 0 then keep the full fasta headers, don't modify or take only what's before the first space. Otherwise, if 3rd arg is absent or 0 then only get first label before space and replace |,[]()+/:\t\r\s with chars that don't mess up tree software
# Example:
# split_by_fasta_entry2.pl  Bacillus_anthracis.fasta $out_prefix   # modify headers
# split_by_fasta_entry2.pl  Bacillus_anthracis.fasta $out_prefix 1 # do not modify headers

my $infile     = $ARGV[0];
my $out_prefix = $ARGV[1];

my $keep_header = 0;
if ($ARGV[2]>0) {
    $keep_header = $ARGV[2];
}

my @ids=();


open INDATA,"$infile" or die "Can't open $infile: $!\n";
my $file_index = 0;

my $sequence = "";
my $id;
   
open DECODE,">fileName2genomeName";
        
while (my $line = <INDATA>) {
    if ($line =~ /^>(.*)/) {
	if ($sequence ne "") {
	    my $out=$out_prefix.$file_index;
	    print DECODE "$out\t$id\n";
	    open(OUTFILE, ">$out") || die "Can't open [$out] for writing $!\n";
	    print OUTFILE ">$id\n",uc($sequence),"\n";
	    close(OUTFILE);
	    
	    $file_index++;
   	}
	$id = $1;

	chomp($id);
	if ($keep_header == 0) {
	    if ($id =~ /^(\S+)\s+(.*)/) {
		$name=$1;
		$name =~ s/\|/_/g;
		$name =~ s/,//g;
		$name =~ s/\+/plus/g;
		$name =~ s/\[//g;
		$name =~ s/\]//g;
		$name =~ s/\(//g;
		$name =~ s/\)//g;
		$name =~ s/\//-/g;
		$name =~ s/[\t\r\s]+/_/g;
		$name =~ s/_+/_/g;
		$name =~ s/\://g;
		
		$name2 =substr($name,0,88);
		
		$id =$name2; 
	    }
	}
	
	$sequence = "";
    } else {
	chomp($line);
	$line =~ s/[-|\*]//g; #Get rid of "-" and "*" if it's from an alignment
	$line =~ s/[\n\t\r]//g; # Get rid of tabs, and new lines
	$sequence .= $line;
    }
        
}   

# Add last one
if (defined $id) {
    my $out=$out_prefix.$file_index;
    print DECODE "$out\t$id\n";
    open(OUTFILE, ">$out") || die "Can't open [$out] for writing $!\n";
    print OUTFILE ">$id\n",uc($sequence),"\n";
    close(OUTFILE);
}
close DECODE;
close INDATA or warn  "Can't close $infile: $!\n";



